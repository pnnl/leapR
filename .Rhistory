# load phosphoproteomics data for 69 tumors
phosphodata<-read.csv(paste0(datadir,'phosphodata.csv'))|>
as.matrix()
#data("phosphodata")
data("kinasesubstrates")
# for an individual tumor calculate the Kinase-Substrate Enrichment (similar to KSEA)
#     This uses the site-specific phosphorylation data to determine which kinases
#     might be active by assessing the enrichment of the phosphorylation of their known substrates
phosphodata.ksea.order = leapR(geneset=kinasesubstrates,
enrichment_method="enrichment_in_order",
datamatrix=phosphodata,
primary_columns="TCGA-13-1484")
colnames(phosphodata)
# load phosphoproteomics data for 69 tumors
phosphodata<-read.csv(paste0(datadir,'phosphodata.csv'),check.names=FALSE,row.names=1)|>
as.matr
# load phosphoproteomics data for 69 tumors
phosphodata<-read.csv(paste0(datadir,'phosphodata.csv'),check.names=FALSE,row.names=1)|>
as.matrix()
#data("phosphodata")
data("kinasesubstrates")
# for an individual tumor calculate the Kinase-Substrate Enrichment (similar to KSEA)
#     This uses the site-specific phosphorylation data to determine which kinases
#     might be active by assessing the enrichment of the phosphorylation of their known substrates
phosphodata.ksea.order = leapR(geneset=kinasesubstrates,
enrichment_method="enrichment_in_order",
datamatrix=phosphodata,
primary_columns="TCGA-13-1484")
phosphodata<-read.csv(paste0(datadir,'phosphodata.csv'),check.names=FALSE,row.names=1)|>
as.matrix()
phosphodata
phosphodata<-read.csv(paste0(datadir,'phosphodata.csv'),check.names=FALSE,row.names=1)
phosphodata
phosphodata.ksea.order = leapR(geneset=kinasesubstrates,
enrichment_method="enrichment_in_order",
datamatrix=phosphodata,
primary_columns="TCGA-13-1484")
warning()
phosphodata.ksea.order
knitr::kable(phosphodata.ksea.order[order(phosphodata.ksea.order[,"pvalue"]),][1:10,])
# now do the same thing but use a threshold
phosphodata.sets.order = leapR(geneset=kinasesubstrates,
enrichment_method="enrichment_in_sets",
datamatrix=phosphodata, threshold=0.5,
primary_columns="TCGA-13-1484")
knitr::kable(phosphodata.sets.order[order(phosphodata.sets.order[,"pvalue"]),][1:10,])
# load phosphoproteomics data for 69 tumors
phosphodata<-read.csv(paste0(datadir,'phosphodata.csv'),check.names=FALSE,row.names=1)
#data("phosphodata")
data("kinasesubstrates")
# for an individual tumor calculate the Kinase-Substrate Enrichment (similar to KSEA)
#     This uses the site-specific phosphorylation data to determine which kinases
#     might be active by assessing the enrichment of the phosphorylation of their known substrates
phosphodata.ksea.order = leapR(geneset=kinasesubstrates,
enrichment_method="enrichment_in_order",
datamatrix=phosphodata,
primary_columns="TCGA-13-1484")
knitr::kable(phosphodata.ksea.order[order(phosphodata.ksea.order[,"pvalue"]),][1:10,])
# now do the same thing but use a threshold
phosphodata.sets.order = leapR(geneset=kinasesubstrates,
enrichment_method="enrichment_in_sets",
datamatrix=phosphodata, threshold=0.5,
primary_columns="TCGA-13-1484")
knitr::kable(phosphodata.sets.order[order(phosphodata.sets.order[,"pvalue"]),][1:10,])
#load the single omic and multi-omic pathway databases
data("krbpaths")
data("mo_krbpaths")
# comparison enrichment in transcriptional data
transdata.comp.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_comparison',
datamatrix=transdata, primary_columns=shortlist,
secondary_columns=longlist)
# comparison enrichment in proteomics data
# this is the same code used above, just repeated here for clarity
protdata.comp.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_comparison',
datamatrix=protdata, primary_columns=shortlist,
secondary_columns=longlist)
# comparison enrichment in phosphoproteomics data
phosphodata.comp.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_comparison',
datamatrix=phosphodata, primary_columns=shortlist,
secondary_columns=longlist, id_column=1)
# set enrichment in transcriptomics data
# perform the comparison t test
transdata.svl.ttest = t(sapply(rownames(transdata), function (r) {
res=try(t.test(transdata[r,shortlist], transdata[r,longlist]));
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
colnames(transdata.svl.ttest) = c('p-value','difference')
transdata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=transdata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
# set enrichment in proteomics data
# perform the comparison t test
protdata.svl.ttest = t(sapply(rownames(protdata), function (r) {
res=try(t.test(protdata[r,shortlist], protdata[r,longlist]));
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
colnames(protdata.svl.ttest) = c('p-value','difference')
protdata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=protdata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
# set enrichment in phosphoproteomics data
# perform the comparison t test
phosphodata.svl.ttest = t(sapply(rownames(phosphodata), function (r) {
res=try(t.test(phosphodata[r,shortlist], phosphodata[r,longlist]));
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
phosphodata.svl.ttest = data.frame(protein=phosphodata[,1], pvalue=phosphodata.svl.ttest[,1],
difference=phosphodata.svl.ttest[,2])
colnames(phosphodata.svl.ttest) = c('protein', 'p-value','difference')
phosphodata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
id_column="protein",
datamatrix=phosphodata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
# order enrichment in transcriptomics data
transdata.order.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_order',
datamatrix=transdata.svl.ttest, primary_columns="difference")
# order enrichment in proteomics data
protdata.order.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_order',
datamatrix=protdata.svl.ttest, primary_columns="difference")
# order enrichment in phosphoproteomics data
phosphodata.order.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_order',
id_column=1,
datamatrix=phosphodata.svl.ttest, primary_columns="difference")
# correlation difference in transcriptomics data
transdata.corr.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method="correlation_comparison",
datamatrix=transdata, primary_columns=shortlist,
secondary_columns=longlist)
#load the single omic and multi-omic pathway databases
data("krbpaths")
data("mo_krbpaths")
# comparison enrichment in transcriptional data
transdata.comp.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_comparison',
datamatrix=transdata, primary_columns=shortlist,
secondary_columns=longlist)
# comparison enrichment in proteomics data
# this is the same code used above, just repeated here for clarity
protdata.comp.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_comparison',
datamatrix=protdata, primary_columns=shortlist,
secondary_columns=longlist)
# comparison enrichment in phosphoproteomics data
phosphodata.comp.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_comparison',
datamatrix=phosphodata, primary_columns=shortlist,
secondary_columns=longlist, id_column=1)
# set enrichment in transcriptomics data
# perform the comparison t test
transdata.svl.ttest = t(sapply(rownames(transdata), function (r) {
res=try(t.test(transdata[r,shortlist], transdata[r,longlist]));
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
colnames(transdata.svl.ttest) = c('p-value','difference')
transdata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=transdata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
# set enrichment in proteomics data
# perform the comparison t test
protdata.svl.ttest = t(sapply(rownames(protdata), function (r) {
res=try(t.test(protdata[r,shortlist], protdata[r,longlist]));
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
colnames(protdata.svl.ttest) = c('p-value','difference')
protdata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=protdata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
# set enrichment in phosphoproteomics data
# perform the comparison t test
phosphodata.svl.ttest = t(sapply(rownames(phosphodata), function (r) {
res=try(t.test(phosphodata[r,shortlist], phosphodata[r,longlist]));
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
phosphodata.svl.ttest = data.frame(protein=phosphodata[,1], pvalue=phosphodata.svl.ttest[,1],
difference=phosphodata.svl.ttest[,2])
colnames(phosphodata.svl.ttest) = c('protein', 'p-value','difference')
phosphodata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
id_column="protein",
datamatrix=phosphodata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
# order enrichment in transcriptomics data
transdata.order.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_order',
datamatrix=transdata.svl.ttest, primary_columns="difference")
# order enrichment in proteomics data
protdata.order.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_order',
datamatrix=protdata.svl.ttest, primary_columns="difference")
# order enrichment in phosphoproteomics data
phosphodata.order.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_order',
id_column=1,
datamatrix=phosphodata.svl.ttest, primary_columns="difference")
# correlation difference in transcriptomics data
transdata.corr.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method="correlation_comparison",
datamatrix=transdata, primary_columns=shortlist,
secondary_columns=longlist)
# correlation difference in proteomics data
protdata.corr.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method="correlation_comparison",
datamatrix=protdata, primary_columns=shortlist,
secondary_columns=longlist)
# correlation difference in phosphoproteomics data
phosphodata.corr.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method="correlation_comparison",
datamatrix=phosphodata, primary_columns=shortlist,
secondary_columns=longlist, id_column=1)
#combine the omics data into one with prefix tags
combodata = combine_omics(proteomics=protdata, transcriptomics=transdata, phospho=phosphodata, id_column=1)
# comparison enrichment for combodata
combodata.enrichment.svl = leapR(geneset=mo_krbpaths,
enrichment_method='enrichment_comparison',
datamatrix=combodata, primary_columns=shortlist,
secondary_columns=longlist, id_column=1)
# set enrichment in combo data
# perform the comparison t test
combodata.svl.ttest = t(sapply(rownames(combodata), function (r) {
res=try(t.test(combodata[r,shortlist], combodata[r,longlist]));
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
combodata.svl.ttest = data.frame(protein=combodata[,1], pvalue=combodata.svl.ttest[,1],
difference=combodata.svl.ttest[,2])
colnames(combodata.svl.ttest) = c('protein', 'p-value','difference')
combodata.set.enrichment.svl = leapR(geneset=mo_krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=combodata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
combodata.set.enrichment.svl = leapR(geneset=mo_krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=combodata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.1)
combodata.set.enrichment.svl = leapR(geneset=mo_krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=combodata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=1)
combodata.svl.ttest
devtools::citation()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(cache=FALSE)
library(leapR)
data(msigdb)
data(ncipid)
data(msigdb)
data(ncipid)
datadir='https://github.com/pnnl/leapR/raw/refs/heads/bioc-submission/csv/'
protdata<-read.csv(paste0(datadir,'protdata.csv'),check.names=FALSE,row.names=1)|>
as.matrix()
#transdata<-read.csv(paste0(datadir,'transdata.csv.gz'),check.names=FALSE,row.names=1)
transdata<-readr::read_csv(paste0(datadir,'transdata.csv.gz'))|>
tibble::column_to_rownames('...1')|>
as.matrix()
data(shortlist)
data(longlist)
# in this example we lump a bunch of patients together (the 'short survivors') and compare
#   them to another group (the 'long survivors')
###using enrichment_wrapper function
protdata.enrichment.svl = leapR(geneset=ncipid,
enrichment_method='enrichment_comparison',
datamatrix=protdata, primary_columns=shortlist,
secondary_columns=longlist)
knitr::kable(protdata.enrichment.svl[order(protdata.enrichment.svl[,"pvalue"]),][1:10,])
# another application is to compare just one patient against another (this would be the
#     equivalent of comparing one time point to another)
###using enrichment_wrapper function
protdata.enrichment.svl.ovo = leapR(geneset=ncipid,
enrichment_method='enrichment_comparison',
datamatrix=protdata,
primary_columns=shortlist[1],
secondary_columns=longlist[1])
knitr::kable(protdata.enrichment.svl.ovo[order(protdata.enrichment.svl.ovo[,"pvalue"]),][1:10,])
protdata.enrichment.svl
protdata.enrichment.svl[order(protdata.enrichment.svl[,"pvalue"]),][1:10,]
# for this example we will construct a list of genes from the expression data
#     to emulate what you might be inputting
genelist = rownames(protdata)[which(protdata[,1]>0.5)]
background = rownames(protdata)
###using enrichment_wrapper function
protdata.enrichment.order = leapR(geneset=ncipid,
enrichment_method="enrichment_in_order",
datamatrix=protdata, threshold=.5,
primary_columns="TCGA-13-1484")
knitr::kable(protdata.enrichment.order[order(protdata.enrichment.order[,"pvalue"]),][1:10,])
# in this example we construct some modules from the hierarchical clustering of the
#     data
protdata_naf = as.matrix(protdata)
# hierarchical clustering is not too happy with lots of missing values
#    so we'll do a zero fill on this to get the modules
protdata_naf[which(is.na(protdata_naf))] = 0
# construct the hierarchical clustering using the 'wardD' method, which
#    seems to give more even sized modules
protdata_hc = hclust(dist(protdata_naf), method="ward.D2")
# arbitrarily we'll chop the clusters into 5 modules
modules = cutree(protdata_hc, k=5)
##sara: created list
clusters = lapply(unique(modules),function(x) names(which(modules==x)))
# modules is a named list of values where each value is a module
#         number and the name is the gene name
# To do enrichment for one module (module 1 in this case) do this
protdata.enrichment.sets.module_1 = leapR(geneset=ncipid, enrichment_method="enrichment_in_sets",
background=names(modules),
targets=names(modules[which(modules==1)]))
# To do enrichment on all modules and return the list of enrichment results tables do this
protdata.enrichment.sets.modules = cluster_enrichment(geneset=ncipid, clusters=clusters, background=names(modules), sigfilter=0.5)
##nothing is enriched
knitr::kable(head(protdata.enrichment.sets.modules))
# This is how you calculate enrichment in a ranked list (for example from topology)
###using enrichment_wrapper function
protdata.enrichment.sets = leapR(geneset=ncipid, "enrichment_in_order",
datamatrix=protdata,
primary_columns=shortlist[1])
knitr::kable(protdata.enrichment.sets[order(protdata.enrichment.sets[,"pvalue"]),][1:10,])
# in this example we lump a bunch of patients together (the 'short survivors') and compare
#   them to another group (the 'long survivors')
###using enrichment_wrapper function
protdata.enrichment.svl = leapR(geneset=ncipid,
enrichment_method='enrichment_comparison',
datamatrix=protdata, primary_columns=shortlist,
secondary_columns=longlist)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(cache=FALSE)
library(leapR)
data(msigdb)
data(ncipid)
datadir='https://github.com/pnnl/leapR/raw/refs/heads/bioc-submission/csv/'
protdata<-read.csv(paste0(datadir,'protdata.csv'),check.names=FALSE,row.names=1)|>
as.matrix()
#transdata<-read.csv(paste0(datadir,'transdata.csv.gz'),check.names=FALSE,row.names=1)
transdata<-readr::read_csv(paste0(datadir,'transdata.csv.gz'))|>
tibble::column_to_rownames('...1')|>
as.matrix()
data(shortlist)
data(longlist)
# in this example we lump a bunch of patients together (the 'short survivors') and compare
#   them to another group (the 'long survivors')
###using enrichment_wrapper function
protdata.enrichment.svl = leapR(geneset=ncipid,
enrichment_method='enrichment_comparison',
datamatrix=protdata, primary_columns=shortlist,
secondary_columns=longlist)
knitr::kable(protdata.enrichment.svl[order(protdata.enrichment.svl[,"pvalue"]),][1:10,])
# another application is to compare just one patient against another (this would be the
#     equivalent of comparing one time point to another)
###using enrichment_wrapper function
protdata.enrichment.svl.ovo = leapR(geneset=ncipid,
enrichment_method='enrichment_comparison',
datamatrix=protdata,
primary_columns=shortlist[1],
secondary_columns=longlist[1])
knitr::kable(protdata.enrichment.svl.ovo[order(protdata.enrichment.svl.ovo[,"pvalue"]),][1:10,])
# for this example we will construct a list of genes from the expression data
#     to emulate what you might be inputting
genelist = rownames(protdata)[which(protdata[,1]>0.5)]
background = rownames(protdata)
###using enrichment_wrapper function
protdata.enrichment.order = leapR(geneset=ncipid,
enrichment_method="enrichment_in_order",
datamatrix=protdata, threshold=.5,
primary_columns="TCGA-13-1484")
knitr::kable(protdata.enrichment.order[order(protdata.enrichment.order[,"pvalue"]),][1:10,])
# in this example we construct some modules from the hierarchical clustering of the
#     data
protdata_naf = as.matrix(protdata)
# hierarchical clustering is not too happy with lots of missing values
#    so we'll do a zero fill on this to get the modules
protdata_naf[which(is.na(protdata_naf))] = 0
# construct the hierarchical clustering using the 'wardD' method, which
#    seems to give more even sized modules
protdata_hc = hclust(dist(protdata_naf), method="ward.D2")
# arbitrarily we'll chop the clusters into 5 modules
modules = cutree(protdata_hc, k=5)
##sara: created list
clusters = lapply(unique(modules),function(x) names(which(modules==x)))
# modules is a named list of values where each value is a module
#         number and the name is the gene name
# To do enrichment for one module (module 1 in this case) do this
protdata.enrichment.sets.module_1 = leapR(geneset=ncipid, enrichment_method="enrichment_in_sets",
background=names(modules),
targets=names(modules[which(modules==1)]))
# To do enrichment on all modules and return the list of enrichment results tables do this
protdata.enrichment.sets.modules = cluster_enrichment(geneset=ncipid, clusters=clusters, background=names(modules), sigfilter=0.5)
##nothing is enriched
knitr::kable(head(protdata.enrichment.sets.modules))
names(modules)
modules
protdata.enrichment.sets.modules = cluster_enrichment(geneset=ncipid, clusters=clusters, background=names(modules), sigfilter=0.5)
clusters
length(clusters)
x=length(clusters)
background=unlist(mode())
background=unlist(modules)
background
background=names(modules)
clusters
this = sapply(1:x, function (i) list(leapR(geneset=geneset, enrichment_method="enrichment_in_sets",
targets=clusters[[i]], background=background)))
geneset=ncipid
this = sapply(1:x, function (i) list(leapR(geneset=geneset, enrichment_method="enrichment_in_sets",
targets=clusters[[i]], background=background)))
this
data('data/krbpaths.rda')
data("krbpaths")
this = sapply(1:x, function (i) list(leapR(geneset=krbpaths, enrichment_method="enrichment_in_sets",
targets=clusters[[i]], background=background)))
this
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
knitr::kable(head(protdata.enrichment.sets.modules))
protdata.enrichment.sets.modules
outlist <-do.call(rbind,lapply(this,function(x)
subset(s,'BH_pvalue'<sigfilter)))
outlist = list()
outlist <-do.call(rbind,lapply(this,function(x)
subset(x,'BH_pvalue'<sigfilter)))
sigfilter=0.5
outlist = list()
outlist <-do.call(rbind,lapply(this,function(x)
subset(x,'BH_pvalue'<sigfilter)))
outlist
this[[1]]
subset(this[[1]],'BH_pvalue'<0.05)
subset(this[[1]],'BH_pvalue'<0.5)
View(this[[1]])
this[,'BH_pvalue']
this[[1]][,'BH_pvalue']
this[[1]][,'BH_pvalue']<0.05
i=1
these=this[[i]]
these
this[,'BH_pvalue']
these[,'BH_pvalue']
which(these[,'BH_pvalue']<0.05)
which(these[,'BH_pvalue']<sigfilter)
these[which(these[,'BH_pvalue']<sigfilter),]
list(these[which(these[,'BH_pvalue']<sigfilter),])
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.05)
knitr::kable(head(protdata.enrichment.sets.modules))
clusters
unlist(clusters)
unique(unlist(clusters))
unlist(clusters)
protdata.enrichment.sets.modules = cluster_enrichment(geneset=ncipid, clusters=clusters, background=names(modules), sigfilter=0.5)
knitr::kable(head(protdata.enrichment.sets.modules))
protdata.enrichment.sets.modules = cluster_enrichment(geneset=ncipid, clusters=clusters, background=names(modules), sigfilter=NA)
knitr::kable(head(protdata.enrichment.sets.modules))
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=NA)
knitr::kable(head(protdata.enrichment.sets.modules))
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
knitr::kable(head(protdata.enrichment.sets.modules))
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
these[,'BH_pvalue']
which(these[,'BH_pvalue']<sigfilter)
these[which(these[,'BH_pvalue']<sigfilter),]
list(these[which(these[,'BH_pvalue']<sigfilter),])
c(list(),list(these)
)
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
knitr::kable(head(protdata.enrichment.sets.modules))
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
knitr::kable(head(protdata.enrichment.sets.modules))
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
View(these)
View(these)
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=krbpaths, clusters=clusters, background=names(modules), sigfilter=0.5)
protdata.enrichment.sets.modules = cluster_enrichment(geneset=ncipid, clusters=clusters, background=names(modules), sigfilter=0.5)
source("~/Library/CloudStorage/OneDrive-PNNL/Documents/GitHub/leapR/R/cluster_enrichment.R")
protdata.enrichment.sets.modules = cluster_enrichment(geneset=ncipid, clusters=clusters, background=names(modules), sigfilter=0.5)
?leapR
