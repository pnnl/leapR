if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
colnames(transdata.svl.ttest) = c('p-value','difference')
transdata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=transdata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
# set enrichment in proteomics data
# perform the comparison t test
protdata.svl.ttest = t(sapply(rownames(protdata), function (r) {
res=try(t.test(protdata[r,shortlist], protdata[r,longlist]));
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
colnames(protdata.svl.ttest) = c('p-value','difference')
protdata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=protdata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
# set enrichment in phosphoproteomics data
# perform the comparison t test
phosphodata.svl.ttest = t(sapply(rownames(phosphodata), function (r) {
res=try(t.test(phosphodata[r,shortlist], phosphodata[r,longlist]));
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
phosphodata.svl.ttest = data.frame(protein=phosphodata[,1], pvalue=phosphodata.svl.ttest[,1],
difference=phosphodata.svl.ttest[,2])
colnames(phosphodata.svl.ttest) = c('protein', 'p-value','difference')
phosphodata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
id_column="protein",
datamatrix=phosphodata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
# order enrichment in transcriptomics data
transdata.order.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_order',
datamatrix=transdata.svl.ttest, primary_columns="difference")
# order enrichment in proteomics data
protdata.order.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_order',
datamatrix=protdata.svl.ttest, primary_columns="difference")
# order enrichment in phosphoproteomics data
phosphodata.order.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_order',
id_column=1,
datamatrix=phosphodata.svl.ttest, primary_columns="difference")
# correlation difference in transcriptomics data
transdata.corr.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method="correlation_comparison",
datamatrix=transdata, primary_columns=shortlist,
secondary_columns=longlist)
# correlation difference in proteomics data
protdata.corr.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method="correlation_comparison",
datamatrix=protdata, primary_columns=shortlist,
secondary_columns=longlist)
# correlation difference in phosphoproteomics data
phosphodata.corr.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method="correlation_comparison",
datamatrix=phosphodata, primary_columns=shortlist,
secondary_columns=longlist, id_column=1)
#combine the omics data into one with prefix tags
combodata = combine_omics(proteomics=protdata, transcriptomics=transdata, phospho=phosphodata, id_column=1)
# comparison enrichment for combodata
combodata.enrichment.svl = leapR(geneset=mo_krbpaths,
enrichment_method='enrichment_comparison',
datamatrix=combodata, primary_columns=shortlist,
secondary_columns=longlist, id_column=1)
# set enrichment in combo data
# perform the comparison t test
combodata.svl.ttest = t(sapply(rownames(combodata), function (r) {
res=try(t.test(combodata[r,shortlist], combodata[r,longlist]));
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
combodata.svl.ttest = data.frame(protein=combodata[,1], pvalue=combodata.svl.ttest[,1],
difference=combodata.svl.ttest[,2])
colnames(combodata.svl.ttest) = c('protein', 'p-value','difference')
combodata.set.enrichment.svl = leapR(geneset=mo_krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=combodata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
phosphodata.corr.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method="correlation_comparison",
datamatrix=phosphodata, primary_columns=shortlist,
secondary_columns=longlist, id_column='hgnc_id')
#load the single omic and multi-omic pathway databases
data("krbpaths")
data("mo_krbpaths")
# comparison enrichment in transcriptional data
transdata.comp.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_comparison',
datamatrix=transdata, primary_columns=shortlist,
secondary_columns=longlist)
# comparison enrichment in proteomics data
# this is the same code used above, just repeated here for clarity
protdata.comp.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_comparison',
datamatrix=protdata, primary_columns=shortlist,
secondary_columns=longlist)
# comparison enrichment in phosphoproteomics data
phosphodata.comp.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_comparison',
datamatrix=phosphodata, primary_columns=shortlist,
secondary_columns=longlist, id_column='hgnc_id')
# set enrichment in transcriptomics data
# perform the comparison t test
transdata.svl.ttest = t(sapply(rownames(transdata), function (r) {
res=try(t.test(transdata[r,shortlist], transdata[r,longlist]));
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
colnames(transdata.svl.ttest) = c('p-value','difference')
transdata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=transdata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
# set enrichment in proteomics data
# perform the comparison t test
protdata.svl.ttest = t(sapply(rownames(protdata), function (r) {
res=try(t.test(protdata[r,shortlist], protdata[r,longlist]));
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
colnames(protdata.svl.ttest) = c('p-value','difference')
protdata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=protdata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
# set enrichment in phosphoproteomics data
# perform the comparison t test
phosphodata.svl.ttest = t(sapply(rownames(phosphodata), function (r) {
res=try(t.test(phosphodata[r,shortlist], phosphodata[r,longlist]));
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
phosphodata.svl.ttest = data.frame(protein=phosphodata[,1], pvalue=phosphodata.svl.ttest[,1],
difference=phosphodata.svl.ttest[,2])
colnames(phosphodata.svl.ttest) = c('protein', 'p-value','difference')
phosphodata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
id_column="protein",
datamatrix=phosphodata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
protdata.svl.ttest
protdata.set.enrichment.svl
r
rownames(protdata)
r=rownames(protdata)[1]
res=try(t.test(protdata[r,shortlist], protdata[r,longlist]));
res
res$estimate
protdata.svl.ttest = t(sapply(rownames(protdata), function (r) {
res=try(t.test(protdata[r,shortlist], protdata[r,longlist]));
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
protdata.svl.ttest
protdata.svl.ttest<-subset(protdata.svl.ttest,!is.na('p-value'))
protdata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=protdata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
colnames(protdata.svl.ttest)
colnames(protdata.svl.ttest) = c('p-value','difference')
protdata.svl.ttest<-subset(protdata.svl.ttest,!is.na('p-value'))
protdata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=protdata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
phosphodata.svl.ttest = t(sapply(rownames(phosphodata), function (r) {
res=try(t.test(phosphodata[r,shortlist], phosphodata[r,longlist]));
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
phosphodata.svl.ttest
phosphodata.svl.ttest = data.frame(protein=phosphodata[,1], pvalue=phosphodata.svl.ttest[,1],
difference=phosphodata.svl.ttest[,2])
colnames(phosphodata.svl.ttest) = c('protein', 'p-value','difference')
phosphodata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
id_column="protein",
datamatrix=phosphodata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
# order enrichment in transcriptomics data
transdata.order.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_order',
datamatrix=transdata.svl.ttest, primary_columns="difference")
# order enrichment in proteomics data
protdata.order.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_order',
datamatrix=protdata.svl.ttest, primary_columns="difference")
# order enrichment in phosphoproteomics data
phosphodata.order.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_order',
id_column='hgnc_id',
datamatrix=phosphodata.svl.ttest, primary_columns="difference")
?try
#load the single omic and multi-omic pathway databases
data("krbpaths")
data("mo_krbpaths")
# comparison enrichment in transcriptional data
transdata.comp.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_comparison',
datamatrix=transdata, primary_columns=shortlist,
secondary_columns=longlist)
# comparison enrichment in proteomics data
# this is the same code used above, just repeated here for clarity
protdata.comp.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_comparison',
datamatrix=protdata, primary_columns=shortlist,
secondary_columns=longlist)
# comparison enrichment in phosphoproteomics data
phosphodata.comp.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_comparison',
datamatrix=phosphodata, primary_columns=shortlist,
secondary_columns=longlist, id_column='hgnc_id')
# set enrichment in transcriptomics data
# perform the comparison t test
transdata.svl.ttest = t(sapply(rownames(transdata), function (r) {
res=try(t.test(transdata[r,shortlist], transdata[r,longlist]));
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
colnames(transdata.svl.ttest) = c('p-value','difference')
transdata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=transdata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
# set enrichment in proteomics data
# perform the comparison t test
protdata.svl.ttest = t(sapply(rownames(protdata), function (r) {
res=try(t.test(protdata[r,shortlist], protdata[r,longlist]),silent=TRUE);
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
colnames(protdata.svl.ttest) = c('p-value','difference')
protdata.svl.ttest<-subset(protdata.svl.ttest,!is.na('p-value'))
protdata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=protdata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
# set enrichment in phosphoproteomics data
# perform the comparison t test
phosphodata.svl.ttest = t(sapply(rownames(phosphodata), function (r) {
res=try(t.test(phosphodata[r,shortlist], phosphodata[r,longlist]),silent=TRUE);
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
phosphodata.svl.ttest = data.frame(protein=phosphodata[,1], pvalue=phosphodata.svl.ttest[,1],
difference=phosphodata.svl.ttest[,2])
colnames(phosphodata.svl.ttest) = c('protein', 'p-value','difference')
phosphodata.set.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_sets',
id_column="protein",
datamatrix=phosphodata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
# order enrichment in transcriptomics data
transdata.order.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_order',
datamatrix=transdata.svl.ttest, primary_columns="difference")
# order enrichment in proteomics data
protdata.order.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_order',
datamatrix=protdata.svl.ttest, primary_columns="difference")
# order enrichment in phosphoproteomics data
phosphodata.order.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_order',
id_column='hgnc_id',
datamatrix=phosphodata.svl.ttest, primary_columns="difference")
head(phosphodata.svl.ttest)
# order enrichment in phosphoproteomics data
phosphodata.order.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method='enrichment_in_order',
id_column='protein',
datamatrix=phosphodata.svl.ttest, primary_columns="difference")
# correlation difference in transcriptomics data
transdata.corr.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method="correlation_comparison",
datamatrix=transdata, primary_columns=shortlist,
secondary_columns=longlist)
# correlation difference in proteomics data
protdata.corr.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method="correlation_comparison",
datamatrix=protdata, primary_columns=shortlist,
secondary_columns=longlist)
# correlation difference in phosphoproteomics data
phosphodata.corr.enrichment.svl = leapR(geneset=krbpaths,
enrichment_method="correlation_comparison",
datamatrix=phosphodata, primary_columns=shortlist,
secondary_columns=longlist, id_column='hgnc_id')
combodata = combine_omics(proteomics=protdata, transcriptomics=transdata, phospho=phosphodata, id_column=1)
head(combodata)
leapR::leapR(combodata.enrichment.svl = leapR::leapR(geneset=mo_krbpaths,
enrichment_method='enrichment_comparison',
datamatrix=combodata, primary_columns=shortlist,
secondary_columns=longlist, id_column='id')
# set enrichment in combo data
# perform the comparison t test
combodata.svl.ttest = t(sapply(rownames(combodata), function (r) {
combodata.enrichment.svl = leapR::leapR(geneset=mo_krbpaths,
enrichment_method='enrichment_comparison',
datamatrix=combodata, primary_columns=shortlist,
secondary_columns=longlist, id_column='id')
# set enrichment in combo data
# perform the comparison t test
combodata.svl.ttest = t(sapply(rownames(combodata), function (r) {
res=try(t.test(combodata[r,shortlist], combodata[r,longlist]),silent=TRUE);
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
combodata.svl.ttest = data.frame(protein=combodata[,1], pvalue=combodata.svl.ttest[,1],
difference=combodata.svl.ttest[,2])
colnames(combodata.svl.ttest) = c('protein', 'p-value','difference')
combodata.set.enrichment.svl = leapR::leapR(geneset=mo_krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=combodata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
combodata.set.enrichment.svl = leapR::leapR(geneset=mo_krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=combodata.svl.ttest, primary_columns="protein",
greaterthan=FALSE, threshold=0.05)
head(combodata.svl.ttest)
combodata
combodata.svl.ttest = t(sapply(rownames(combodata), function (r) {
res=try(t.test(combodata[r,shortlist], combodata[r,longlist]),silent=TRUE);
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
head(combodata.svl.ttest)
combodata[1,]
combodata[1,shortlist]
combodata[1,longlist]
combodata[,1]
combodata.svl.ttest = data.frame(protein=combodata[,1], pvalue=combodata.svl.ttest[,1],
difference=combodata.svl.ttest[,2])
colnames(combodata.svl.ttest) = c('protein', 'p-value','difference')
combodata.svl.ttest
subset(combodata.svl.ttest,!is.na(p-value))
subset(combodata.svl.ttest,!is.na('p-value'))
combodata.set.enrichment.svl = leapR::leapR(geneset=mo_krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=combodata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
rownames(combodata)
rownames(combodata)[1]
rownames(combodata)[1]->r
res=try(t.test(combodata[r,shortlist], combodata[r,longlist]),silent=TRUE);
res
combodata[r,shortlist]
combodata[r,longlist]
t.test(combodata[r,shortlist], combodata[r,longlist])
combodata<-as.matrix(combodata)
t.test(combodata[r,shortlist], combodata[r,longlist])
combodata[r,]
combodata = leapR::combine_omics(proteomics=protdata, transcriptomics=transdata, phospho=phosphodata, id_column=1)
combodata.svl.ttest = t(sapply(rownames(combodata), function (r) {
res=try(t.test(as.numeric(combodata[r,shortlist]), as.numeric(combodata[r,longlist])),silent=TRUE);
if (class(res) == 'try-error') return(c(NA, NA));
return(c(res$p.value, res$estimate[[1]]-res$estimate[[2]]))}))
combodata.svl.ttest
combodata.svl.ttest = data.frame(protein=combodata[,1], pvalue=combodata.svl.ttest[,1],
difference=combodata.svl.ttest[,2])
colnames(combodata.svl.ttest) = c('protein', 'p-value','difference')
combodata.set.enrichment.svl = leapR::leapR(geneset=mo_krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=combodata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
combodata.set.enrichment.svl
combodata.order.enrichment.svl = leapR::leapR(geneset=mo_krbpaths,
enrichment_method='enrichment_in_order',
datamatrix=combodata.svl.ttest, primary_columns="difference")
combodata.corr.enrichment.svl = leapR::leapR(geneset=mo_krbpaths,
enrichment_method="correlation_comparison",
datamatrix=combodata, primary_columns=shortlist,
secondary_columns=longlist)
combodata.corr.enrichment.svl = leapR::leapR(geneset=mo_krbpaths,
enrichment_method="correlation_comparison",
datamatrix=combodata, primary_columns=shortlist,
secondary_columns=longlist)
head(combodata)
combodata[,1]
combodata[,2]
colnames(combodata)
result<-combodata
nres<-apply(result[,2:ncol(result)],2,as.numeric)
nres
nres[,1]
data.frame(id=result$id,nres)
nres<-apply(result[,2:ncol(result)],2,as.numeric)
rownames(nres)<-rownames(result)
nres
colnames(nrew)
colnames(nres)
?data.frame
data.frame(id=result$id,nres,check.names=FALSE)
data.frame(id=result$id,nres,check.names=FALSE)[,3]
combodata<-data.frame(id=result$id,nres,check.names=FALSE)
combodata.set.enrichment.svl = leapR::leapR(geneset=mo_krbpaths,
enrichment_method='enrichment_in_sets',
datamatrix=combodata.svl.ttest, primary_columns="p-value",
greaterthan=FALSE, threshold=0.05)
# order enrichment in transcriptomics data
combodata.order.enrichment.svl = leapR::leapR(geneset=mo_krbpaths,
enrichment_method='enrichment_in_order',
datamatrix=combodata.svl.ttest, primary_columns="difference")
# correlation difference in combo data
combodata.corr.enrichment.svl = leapR::leapR(geneset=mo_krbpaths,
enrichment_method="correlation_comparison",
datamatrix=combodata, primary_columns=shortlist,
secondary_columns=longlist)
combodata.corr.enrichment.svl
# now take all these results and combine them into one figure
all_results = list(transdata.comp.enrichment.svl,
protdata.comp.enrichment.svl,
phosphodata.comp.enrichment.svl,
combodata.enrichment.svl,
transdata.set.enrichment.svl,
protdata.set.enrichment.svl,
phosphodata.set.enrichment.svl,
combodata.set.enrichment.svl,
transdata.order.enrichment.svl,
protdata.order.enrichment.svl,
phosphodata.order.enrichment.svl,
combodata.order.enrichment.svl,
transdata.corr.enrichment.svl,
protdata.corr.enrichment.svl,
phosphodata.corr.enrichment.svl,
combodata.corr.enrichment.svl)
pathways_of_interest = c("KEGG_APOPTOSIS",
"KEGG_CELL_CYCLE",
"KEGG_ERBB_SIGNALING_PATHWAY",
"KEGG_FOCAL_ADHESION",
"KEGG_INSULIN_SIGNALING_PATHWAY",
"KEGG_MAPK_SIGNALING_PATHWAY",
"KEGG_MISMATCH_REPAIR",
"KEGG_MTOR_SIGNALING_PATHWAY" ,
"KEGG_OXIDATIVE_PHOSPHORYLATION",
"KEGG_P53_SIGNALING_PATHWAY",
"KEGG_PATHWAYS_IN_CANCER",
"KEGG_PROTEASOME",
"KEGG_RIBOSOME",
"KEGG_VEGF_SIGNALING_PATHWAY",
"KEGG_WNT_SIGNALING_PATHWAY")
results.frame = data.frame(pathway=pathways_of_interest,
td.comp=all_results[[1]][pathways_of_interest,"BH_pvalue"]<0.05,
pd.comp=all_results[[2]][pathways_of_interest,"BH_pvalue"]<0.05,
fd.comp=all_results[[3]][pathways_of_interest,"BH_pvalue"]<0.05,
cd.comp=all_results[[4]][pathways_of_interest,"BH_pvalue"]<0.05,
td.set=all_results[[5]][pathways_of_interest,"BH_pvalue"]<0.05,
pd.set=all_results[[6]][pathways_of_interest,"BH_pvalue"]<0.05,
fd.set=all_results[[7]][pathways_of_interest,"BH_pvalue"]<0.05,
cd.set=all_results[[8]][pathways_of_interest,"BH_pvalue"]<0.05,
td.order=all_results[[9]][pathways_of_interest,"BH_pvalue"]<0.05,
pd.order=all_results[[10]][pathways_of_interest,"BH_pvalue"]<0.05,
fd.order=all_results[[11]][pathways_of_interest,"BH_pvalue"]<0.05,
cd.order=all_results[[12]][pathways_of_interest,"BH_pvalue"]<0.05,
td.corr=all_results[[13]][pathways_of_interest,"BH_pvalue"]<0.05,
pd.corr=all_results[[14]][pathways_of_interest,"BH_pvalue"]<0.05,
fd.corr=all_results[[15]][pathways_of_interest,"BH_pvalue"]<0.05,
cd.corr=all_results[[16]][pathways_of_interest,"BH_pvalue"]<0.05)
results.frame.or = data.frame(pathway=pathways_of_interest,
td.comp=all_results[[1]][pathways_of_interest,"oddsratio"],
pd.comp=all_results[[2]][pathways_of_interest,"oddsratio"],
fd.comp=all_results[[3]][pathways_of_interest,"oddsratio"],
cd.comp=all_results[[4]][pathways_of_interest,"oddsratio"],
td.set=log(all_results[[5]][pathways_of_interest,"oddsratio"],2),
pd.set=log(all_results[[6]][pathways_of_interest,"oddsratio"],2),
fd.set=log(all_results[[7]][pathways_of_interest,"oddsratio"],2),
cd.set=log(all_results[[8]][pathways_of_interest,"oddsratio"],2),
td.order=all_results[[9]][pathways_of_interest,"oddsratio"],
pd.order=all_results[[10]][pathways_of_interest,"oddsratio"],
fd.order=all_results[[11]][pathways_of_interest,"oddsratio"],
cd.order=all_results[[12]][pathways_of_interest,"oddsratio"],
td.corr=all_results[[13]][pathways_of_interest,"oddsratio"],
pd.corr=all_results[[14]][pathways_of_interest,"oddsratio"],
fd.corr=all_results[[15]][pathways_of_interest,"oddsratio"],
cd.corr=all_results[[16]][pathways_of_interest,"oddsratio"])
rownames(results.frame) = results.frame[,1]
rownames(results.frame.or) = results.frame.or[,1]
results.frame.sig = results.frame[,2:17]*results.frame.or[,2:17]
library(gplots)
heatmap.2(as.matrix(results.frame.sig[,c(1:4,9:16)]), Colv=NA, trace="none", breaks=c(-1,-.1,-0.0001,0,0.1,1), col=c("blue","lightblue", "grey","pink", "red"), dendrogram="none")
# this comparison of abundance in substrates between case and control
#     is lopsided in the sense that phosphorylation levels were previously
#     reported to be overall higher in the short survivors. Thus the
#     results are not terribly interesting (all kinases are in the same direction)
phosphodata.ksea.comp.svl = leapR::leapR(geneset=kinasesubstrates,
enrichment_method="enrichment_comparison",
datamatrix=phosphodata,
primary_columns=shortlist, secondary_columns=longlist)
# thus for the example we'll look at correlation between known substrates in the
#      case v control conditions
phosphodata.ksea.corr.svl = leapR::leapR(geneset=kinasesubstrates,
enrichment_method="correlation_comparison",
datamatrix=phosphodata,
primary_columns=shortlist,
secondary_columns=longlist)
# for the example we are using an UNCORRECTED PVALUE
#     which will allow us to plot more values, but
#     for real applications it's necessary to use the
#     CORRECTED PVALUE
# here are all the kinases that are *significant (*uncorrected) from the analysis
ksea_result = phosphodata.ksea.corr.svl[order(phosphodata.ksea.corr.svl[,"pvalue"]),][1:9,]
ksea_cols = rep("grey", 9)
ksea_cols[which(ksea_result[,"oddsratio"]>0)] = "black"
# plot left panel: correlation significance of top most significant kinases
barplot(ksea_result[,"oddsratio"], horiz=TRUE, xlim=c(-1,0.5),
names.arg=rownames(ksea_result), las=1, col=ksea_cols)
# plot right panel: abundance comparison results of the same kinases
barplot(phosphodata.ksea.comp.svl[rownames(ksea_result),"oddsratio"],
horiz=TRUE, names.arg=rownames(ksea_result), las=1, col="black")
version()
version
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
?person
?detag
??detag
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
?parse
